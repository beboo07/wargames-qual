from Crypto.Util.number import long_to_bytes
from sympy import mod_inverse
# Define the variables and the poly1nomial ring
a=104290256438464238265920655110843789355215462446618909362719610248661044655027
b=51377041544373038040355907810892111390501284088151402869947729149784382975340
c=33607469487038655534452887169909251709064921357237953655926459853107316549445
p=11777932795008234937554901192530674345218991539703072132156127068946946972145785796843203243414854874792790874422630471893317874927684942543648149902518429
f1=4393450432502936586942125381637603594967424429450041652241154373587594289593710667561969065441313205238350018007250796310103876164723965465384784041009952
f2=11758359456591126288355398100033811157654788859704663069490658186848940636735180110386914705819056992670969028976783609655478685964439506912465882470156531
f3=4526962740230169131710354844377916940967201676526826430849484531211915498483780757376719893812797798719451042286927996929324321141661155944161904629619229

R = PolynomialRing(Zmod(p), 'x, y')
x1, y1 = R.gens()

# Define the equations as poly1nomials
equation1 = (a*x1*y1 + b*x1 - c*y1 + a*b)-f1
equation2 = (a*x1*y1 - a*b*x1 + c*y1 - a*b*c)-f2 
equation3 = (a*x1*y1 + a*b*x1 - b*y1 + a*c)-f3

# Solve the sy1stem of equations
x,y = R.ideal([equation1, equation2, equation3]).groebner_basis()
print(x,y)
print(x1-1,y1)
#print(R.x1)
# Print the solutions

xf=int(x1-x)
yf = int(y1-y)

flag=(yf*mod_inverse(xf,p))%p
print(long_to_bytes(int(flag)))

